// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// GetAllNotesNotes includes the requested fields of the GraphQL type notes.
// The GraphQL type's documentation follows.
//
// A list of notes
//
//
// columns and relationships of "notes"
type GetAllNotesNotes struct {
	Id         int       `json:"id"`
	Note       string    `json:"note"`
	Creator    string    `json:"creator"`
	Created_at time.Time `json:"created_at"`
	// fetch data from the table: "note_tags"
	Note_tags []*GetAllNotesNotesNote_tags `json:"note_tags"`
	// fetch data from the table: "note_links"
	Note_links []*GetAllNotesNotesNote_links `json:"note_links"`
}

// GetId returns GetAllNotesNotes.Id, and is useful for accessing the field via an interface.
func (v *GetAllNotesNotes) GetId() int { return v.Id }

// GetNote returns GetAllNotesNotes.Note, and is useful for accessing the field via an interface.
func (v *GetAllNotesNotes) GetNote() string { return v.Note }

// GetCreator returns GetAllNotesNotes.Creator, and is useful for accessing the field via an interface.
func (v *GetAllNotesNotes) GetCreator() string { return v.Creator }

// GetCreated_at returns GetAllNotesNotes.Created_at, and is useful for accessing the field via an interface.
func (v *GetAllNotesNotes) GetCreated_at() time.Time { return v.Created_at }

// GetNote_tags returns GetAllNotesNotes.Note_tags, and is useful for accessing the field via an interface.
func (v *GetAllNotesNotes) GetNote_tags() []*GetAllNotesNotesNote_tags { return v.Note_tags }

// GetNote_links returns GetAllNotesNotes.Note_links, and is useful for accessing the field via an interface.
func (v *GetAllNotesNotes) GetNote_links() []*GetAllNotesNotesNote_links { return v.Note_links }

// GetAllNotesNotesNote_links includes the requested fields of the GraphQL type note_links.
// The GraphQL type's documentation follows.
//
// links between notes
//
//
// columns and relationships of "note_links"
type GetAllNotesNotesNote_links struct {
	To int `json:"to"`
}

// GetTo returns GetAllNotesNotesNote_links.To, and is useful for accessing the field via an interface.
func (v *GetAllNotesNotesNote_links) GetTo() int { return v.To }

// GetAllNotesNotesNote_tags includes the requested fields of the GraphQL type note_tags.
// The GraphQL type's documentation follows.
//
// Tags on notes
//
//
// columns and relationships of "note_tags"
type GetAllNotesNotesNote_tags struct {
	Tag string `json:"tag"`
}

// GetTag returns GetAllNotesNotesNote_tags.Tag, and is useful for accessing the field via an interface.
func (v *GetAllNotesNotesNote_tags) GetTag() string { return v.Tag }

// GetAllNotesResponse is returned by GetAllNotes on success.
type GetAllNotesResponse struct {
	// fetch data from the table: "notes"
	Notes []*GetAllNotesNotes `json:"notes"`
}

// GetNotes returns GetAllNotesResponse.Notes, and is useful for accessing the field via an interface.
func (v *GetAllNotesResponse) GetNotes() []*GetAllNotesNotes { return v.Notes }

// Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
type Int_comparison_exp struct {
	Eq      int   `json:"_eq"`
	Gt      int   `json:"_gt"`
	Gte     int   `json:"_gte"`
	In      []int `json:"_in"`
	Is_null bool  `json:"_is_null"`
	Lt      int   `json:"_lt"`
	Lte     int   `json:"_lte"`
	Neq     int   `json:"_neq"`
	Nin     []int `json:"_nin"`
}

// GetEq returns Int_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetEq() int { return v.Eq }

// GetGt returns Int_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetGt() int { return v.Gt }

// GetGte returns Int_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetGte() int { return v.Gte }

// GetIn returns Int_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetIn() []int { return v.In }

// GetIs_null returns Int_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Int_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetLt() int { return v.Lt }

// GetLte returns Int_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetLte() int { return v.Lte }

// GetNeq returns Int_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetNeq() int { return v.Neq }

// GetNin returns Int_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetNin() []int { return v.Nin }

// input type for inserting array relation for remote table "note_links"
type Note_links_arr_rel_insert_input struct {
	Data []*Note_links_insert_input `json:"data,omitempty"`
	// on conflict condition
	On_conflict *Note_links_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Note_links_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Note_links_arr_rel_insert_input) GetData() []*Note_links_insert_input { return v.Data }

// GetOn_conflict returns Note_links_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Note_links_arr_rel_insert_input) GetOn_conflict() *Note_links_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "note_links". All fields are combined with a logical 'AND'.
type Note_links_bool_exp struct {
	And  []*Note_links_bool_exp `json:"_and,omitempty"`
	Not  *Note_links_bool_exp   `json:"_not,omitempty"`
	Or   []*Note_links_bool_exp `json:"_or,omitempty"`
	From *Int_comparison_exp    `json:"from,omitempty"`
	To   *Int_comparison_exp    `json:"to,omitempty"`
}

// GetAnd returns Note_links_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Note_links_bool_exp) GetAnd() []*Note_links_bool_exp { return v.And }

// GetNot returns Note_links_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Note_links_bool_exp) GetNot() *Note_links_bool_exp { return v.Not }

// GetOr returns Note_links_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Note_links_bool_exp) GetOr() []*Note_links_bool_exp { return v.Or }

// GetFrom returns Note_links_bool_exp.From, and is useful for accessing the field via an interface.
func (v *Note_links_bool_exp) GetFrom() *Int_comparison_exp { return v.From }

// GetTo returns Note_links_bool_exp.To, and is useful for accessing the field via an interface.
func (v *Note_links_bool_exp) GetTo() *Int_comparison_exp { return v.To }

// unique or primary key constraints on table "note_links"
type Note_links_constraint string

const (
	// unique or primary key constraint
	Note_links_constraintNoteLinksPkey Note_links_constraint = "note_links_pkey"
)

// input type for inserting data into table "note_links"
type Note_links_insert_input struct {
	From int `json:"from"`
	To   int `json:"to"`
}

// GetFrom returns Note_links_insert_input.From, and is useful for accessing the field via an interface.
func (v *Note_links_insert_input) GetFrom() int { return v.From }

// GetTo returns Note_links_insert_input.To, and is useful for accessing the field via an interface.
func (v *Note_links_insert_input) GetTo() int { return v.To }

// on conflict condition type for table "note_links"
type Note_links_on_conflict struct {
	Constraint     Note_links_constraint      `json:"constraint"`
	Update_columns []Note_links_update_column `json:"update_columns"`
	Where          *Note_links_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Note_links_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Note_links_on_conflict) GetConstraint() Note_links_constraint { return v.Constraint }

// GetUpdate_columns returns Note_links_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Note_links_on_conflict) GetUpdate_columns() []Note_links_update_column {
	return v.Update_columns
}

// GetWhere returns Note_links_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Note_links_on_conflict) GetWhere() *Note_links_bool_exp { return v.Where }

// update columns of table "note_links"
type Note_links_update_column string

const (
	// column name
	Note_links_update_columnFrom Note_links_update_column = "from"
	// column name
	Note_links_update_columnTo Note_links_update_column = "to"
)

// input type for inserting array relation for remote table "note_tags"
type Note_tags_arr_rel_insert_input struct {
	Data []*Note_tags_insert_input `json:"data,omitempty"`
	// on conflict condition
	On_conflict *Note_tags_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Note_tags_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Note_tags_arr_rel_insert_input) GetData() []*Note_tags_insert_input { return v.Data }

// GetOn_conflict returns Note_tags_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Note_tags_arr_rel_insert_input) GetOn_conflict() *Note_tags_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "note_tags". All fields are combined with a logical 'AND'.
type Note_tags_bool_exp struct {
	And     []*Note_tags_bool_exp  `json:"_and,omitempty"`
	Not     *Note_tags_bool_exp    `json:"_not,omitempty"`
	Or      []*Note_tags_bool_exp  `json:"_or,omitempty"`
	Id      *Int_comparison_exp    `json:"id,omitempty"`
	Note_id *Int_comparison_exp    `json:"note_id,omitempty"`
	Tag     *String_comparison_exp `json:"tag,omitempty"`
}

// GetAnd returns Note_tags_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Note_tags_bool_exp) GetAnd() []*Note_tags_bool_exp { return v.And }

// GetNot returns Note_tags_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Note_tags_bool_exp) GetNot() *Note_tags_bool_exp { return v.Not }

// GetOr returns Note_tags_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Note_tags_bool_exp) GetOr() []*Note_tags_bool_exp { return v.Or }

// GetId returns Note_tags_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Note_tags_bool_exp) GetId() *Int_comparison_exp { return v.Id }

// GetNote_id returns Note_tags_bool_exp.Note_id, and is useful for accessing the field via an interface.
func (v *Note_tags_bool_exp) GetNote_id() *Int_comparison_exp { return v.Note_id }

// GetTag returns Note_tags_bool_exp.Tag, and is useful for accessing the field via an interface.
func (v *Note_tags_bool_exp) GetTag() *String_comparison_exp { return v.Tag }

// unique or primary key constraints on table "note_tags"
type Note_tags_constraint string

const (
	// unique or primary key constraint
	Note_tags_constraintNoteTagsPkey Note_tags_constraint = "note_tags_pkey"
)

// input type for inserting data into table "note_tags"
type Note_tags_insert_input struct {
	Id      int    `json:"id"`
	Note_id int    `json:"note_id"`
	Tag     string `json:"tag"`
}

// GetId returns Note_tags_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Note_tags_insert_input) GetId() int { return v.Id }

// GetNote_id returns Note_tags_insert_input.Note_id, and is useful for accessing the field via an interface.
func (v *Note_tags_insert_input) GetNote_id() int { return v.Note_id }

// GetTag returns Note_tags_insert_input.Tag, and is useful for accessing the field via an interface.
func (v *Note_tags_insert_input) GetTag() string { return v.Tag }

// on conflict condition type for table "note_tags"
type Note_tags_on_conflict struct {
	Constraint     Note_tags_constraint      `json:"constraint"`
	Update_columns []Note_tags_update_column `json:"update_columns"`
	Where          *Note_tags_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Note_tags_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Note_tags_on_conflict) GetConstraint() Note_tags_constraint { return v.Constraint }

// GetUpdate_columns returns Note_tags_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Note_tags_on_conflict) GetUpdate_columns() []Note_tags_update_column {
	return v.Update_columns
}

// GetWhere returns Note_tags_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Note_tags_on_conflict) GetWhere() *Note_tags_bool_exp { return v.Where }

// update columns of table "note_tags"
type Note_tags_update_column string

const (
	// column name
	Note_tags_update_columnId Note_tags_update_column = "id"
	// column name
	Note_tags_update_columnNoteId Note_tags_update_column = "note_id"
	// column name
	Note_tags_update_columnTag Note_tags_update_column = "tag"
)

// input type for inserting data into table "notes"
type Notes_insert_input struct {
	Created_at    time.Time                        `json:"created_at"`
	Creator       string                           `json:"creator"`
	Id            int                              `json:"id"`
	Note          string                           `json:"note"`
	NoteLinksByTo *Note_links_arr_rel_insert_input `json:"noteLinksByTo,omitempty"`
	Note_links    *Note_links_arr_rel_insert_input `json:"note_links,omitempty"`
	Note_tags     *Note_tags_arr_rel_insert_input  `json:"note_tags,omitempty"`
}

// GetCreated_at returns Notes_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Notes_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetCreator returns Notes_insert_input.Creator, and is useful for accessing the field via an interface.
func (v *Notes_insert_input) GetCreator() string { return v.Creator }

// GetId returns Notes_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Notes_insert_input) GetId() int { return v.Id }

// GetNote returns Notes_insert_input.Note, and is useful for accessing the field via an interface.
func (v *Notes_insert_input) GetNote() string { return v.Note }

// GetNoteLinksByTo returns Notes_insert_input.NoteLinksByTo, and is useful for accessing the field via an interface.
func (v *Notes_insert_input) GetNoteLinksByTo() *Note_links_arr_rel_insert_input {
	return v.NoteLinksByTo
}

// GetNote_links returns Notes_insert_input.Note_links, and is useful for accessing the field via an interface.
func (v *Notes_insert_input) GetNote_links() *Note_links_arr_rel_insert_input { return v.Note_links }

// GetNote_tags returns Notes_insert_input.Note_tags, and is useful for accessing the field via an interface.
func (v *Notes_insert_input) GetNote_tags() *Note_tags_arr_rel_insert_input { return v.Note_tags }

type Search_by_tag_args struct {
	Search_tag string `json:"search_tag"`
}

// GetSearch_tag returns Search_by_tag_args.Search_tag, and is useful for accessing the field via an interface.
func (v *Search_by_tag_args) GetSearch_tag() string { return v.Search_tag }

// Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
type String_comparison_exp struct {
	Eq  string `json:"_eq"`
	Gt  string `json:"_gt"`
	Gte string `json:"_gte"`
	// does the column match the given case-insensitive pattern
	Ilike string   `json:"_ilike"`
	In    []string `json:"_in"`
	// does the column match the given POSIX regular expression, case insensitive
	Iregex  string `json:"_iregex"`
	Is_null bool   `json:"_is_null"`
	// does the column match the given pattern
	Like string `json:"_like"`
	Lt   string `json:"_lt"`
	Lte  string `json:"_lte"`
	Neq  string `json:"_neq"`
	// does the column NOT match the given case-insensitive pattern
	Nilike string   `json:"_nilike"`
	Nin    []string `json:"_nin"`
	// does the column NOT match the given POSIX regular expression, case insensitive
	Niregex string `json:"_niregex"`
	// does the column NOT match the given pattern
	Nlike string `json:"_nlike"`
	// does the column NOT match the given POSIX regular expression, case sensitive
	Nregex string `json:"_nregex"`
	// does the column NOT match the given SQL regular expression
	Nsimilar string `json:"_nsimilar"`
	// does the column match the given POSIX regular expression, case sensitive
	Regex string `json:"_regex"`
	// does the column match the given SQL regular expression
	Similar string `json:"_similar"`
}

// GetEq returns String_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetEq() string { return v.Eq }

// GetGt returns String_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetGt() string { return v.Gt }

// GetGte returns String_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetGte() string { return v.Gte }

// GetIlike returns String_comparison_exp.Ilike, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIlike() string { return v.Ilike }

// GetIn returns String_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIn() []string { return v.In }

// GetIregex returns String_comparison_exp.Iregex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIregex() string { return v.Iregex }

// GetIs_null returns String_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLike returns String_comparison_exp.Like, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetLike() string { return v.Like }

// GetLt returns String_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetLt() string { return v.Lt }

// GetLte returns String_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetLte() string { return v.Lte }

// GetNeq returns String_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNeq() string { return v.Neq }

// GetNilike returns String_comparison_exp.Nilike, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNilike() string { return v.Nilike }

// GetNin returns String_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNin() []string { return v.Nin }

// GetNiregex returns String_comparison_exp.Niregex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNiregex() string { return v.Niregex }

// GetNlike returns String_comparison_exp.Nlike, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNlike() string { return v.Nlike }

// GetNregex returns String_comparison_exp.Nregex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNregex() string { return v.Nregex }

// GetNsimilar returns String_comparison_exp.Nsimilar, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNsimilar() string { return v.Nsimilar }

// GetRegex returns String_comparison_exp.Regex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetRegex() string { return v.Regex }

// GetSimilar returns String_comparison_exp.Similar, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetSimilar() string { return v.Similar }

// __addNoteInput is used internally by genqlient
type __addNoteInput struct {
	Note *Notes_insert_input `json:"note,omitempty"`
}

// GetNote returns __addNoteInput.Note, and is useful for accessing the field via an interface.
func (v *__addNoteInput) GetNote() *Notes_insert_input { return v.Note }

// __addNoteLinksInput is used internally by genqlient
type __addNoteLinksInput struct {
	Links []*Note_links_insert_input `json:"links,omitempty"`
}

// GetLinks returns __addNoteLinksInput.Links, and is useful for accessing the field via an interface.
func (v *__addNoteLinksInput) GetLinks() []*Note_links_insert_input { return v.Links }

// __addNoteTagsAndLinksInput is used internally by genqlient
type __addNoteTagsAndLinksInput struct {
	Tags  []*Note_tags_insert_input  `json:"tags,omitempty"`
	Links []*Note_links_insert_input `json:"links,omitempty"`
}

// GetTags returns __addNoteTagsAndLinksInput.Tags, and is useful for accessing the field via an interface.
func (v *__addNoteTagsAndLinksInput) GetTags() []*Note_tags_insert_input { return v.Tags }

// GetLinks returns __addNoteTagsAndLinksInput.Links, and is useful for accessing the field via an interface.
func (v *__addNoteTagsAndLinksInput) GetLinks() []*Note_links_insert_input { return v.Links }

// __addNoteTagsInput is used internally by genqlient
type __addNoteTagsInput struct {
	Tags []*Note_tags_insert_input `json:"tags,omitempty"`
}

// GetTags returns __addNoteTagsInput.Tags, and is useful for accessing the field via an interface.
func (v *__addNoteTagsInput) GetTags() []*Note_tags_insert_input { return v.Tags }

// __getNoteByIdInput is used internally by genqlient
type __getNoteByIdInput struct {
	Id int `json:"id"`
}

// GetId returns __getNoteByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getNoteByIdInput) GetId() int { return v.Id }

// __searchNotesByTagInput is used internally by genqlient
type __searchNotesByTagInput struct {
	Args *Search_by_tag_args `json:"args,omitempty"`
}

// GetArgs returns __searchNotesByTagInput.Args, and is useful for accessing the field via an interface.
func (v *__searchNotesByTagInput) GetArgs() *Search_by_tag_args { return v.Args }

// __updateNoteInput is used internally by genqlient
type __updateNoteInput struct {
	Id   int    `json:"id"`
	Note string `json:"note"`
}

// GetId returns __updateNoteInput.Id, and is useful for accessing the field via an interface.
func (v *__updateNoteInput) GetId() int { return v.Id }

// GetNote returns __updateNoteInput.Note, and is useful for accessing the field via an interface.
func (v *__updateNoteInput) GetNote() string { return v.Note }

// addNoteInsert_notes_oneNotes includes the requested fields of the GraphQL type notes.
// The GraphQL type's documentation follows.
//
// A list of notes
//
//
// columns and relationships of "notes"
type addNoteInsert_notes_oneNotes struct {
	Id int `json:"id"`
}

// GetId returns addNoteInsert_notes_oneNotes.Id, and is useful for accessing the field via an interface.
func (v *addNoteInsert_notes_oneNotes) GetId() int { return v.Id }

// addNoteLinksInsert_note_linksNote_links_mutation_response includes the requested fields of the GraphQL type note_links_mutation_response.
// The GraphQL type's documentation follows.
//
// response of any mutation on the table "note_links"
type addNoteLinksInsert_note_linksNote_links_mutation_response struct {
	// data from the rows affected by the mutation
	Returning []*addNoteLinksInsert_note_linksNote_links_mutation_responseReturningNote_links `json:"returning"`
}

// GetReturning returns addNoteLinksInsert_note_linksNote_links_mutation_response.Returning, and is useful for accessing the field via an interface.
func (v *addNoteLinksInsert_note_linksNote_links_mutation_response) GetReturning() []*addNoteLinksInsert_note_linksNote_links_mutation_responseReturningNote_links {
	return v.Returning
}

// addNoteLinksInsert_note_linksNote_links_mutation_responseReturningNote_links includes the requested fields of the GraphQL type note_links.
// The GraphQL type's documentation follows.
//
// links between notes
//
//
// columns and relationships of "note_links"
type addNoteLinksInsert_note_linksNote_links_mutation_responseReturningNote_links struct {
	To int `json:"to"`
}

// GetTo returns addNoteLinksInsert_note_linksNote_links_mutation_responseReturningNote_links.To, and is useful for accessing the field via an interface.
func (v *addNoteLinksInsert_note_linksNote_links_mutation_responseReturningNote_links) GetTo() int {
	return v.To
}

// addNoteLinksResponse is returned by addNoteLinks on success.
type addNoteLinksResponse struct {
	// insert data into the table: "note_links"
	Insert_note_links *addNoteLinksInsert_note_linksNote_links_mutation_response `json:"insert_note_links"`
}

// GetInsert_note_links returns addNoteLinksResponse.Insert_note_links, and is useful for accessing the field via an interface.
func (v *addNoteLinksResponse) GetInsert_note_links() *addNoteLinksInsert_note_linksNote_links_mutation_response {
	return v.Insert_note_links
}

// addNoteResponse is returned by addNote on success.
type addNoteResponse struct {
	// insert a single row into the table: "notes"
	Insert_notes_one *addNoteInsert_notes_oneNotes `json:"insert_notes_one"`
}

// GetInsert_notes_one returns addNoteResponse.Insert_notes_one, and is useful for accessing the field via an interface.
func (v *addNoteResponse) GetInsert_notes_one() *addNoteInsert_notes_oneNotes {
	return v.Insert_notes_one
}

// addNoteTagsAndLinksInsert_note_linksNote_links_mutation_response includes the requested fields of the GraphQL type note_links_mutation_response.
// The GraphQL type's documentation follows.
//
// response of any mutation on the table "note_links"
type addNoteTagsAndLinksInsert_note_linksNote_links_mutation_response struct {
	// data from the rows affected by the mutation
	Returning []*addNoteTagsAndLinksInsert_note_linksNote_links_mutation_responseReturningNote_links `json:"returning"`
}

// GetReturning returns addNoteTagsAndLinksInsert_note_linksNote_links_mutation_response.Returning, and is useful for accessing the field via an interface.
func (v *addNoteTagsAndLinksInsert_note_linksNote_links_mutation_response) GetReturning() []*addNoteTagsAndLinksInsert_note_linksNote_links_mutation_responseReturningNote_links {
	return v.Returning
}

// addNoteTagsAndLinksInsert_note_linksNote_links_mutation_responseReturningNote_links includes the requested fields of the GraphQL type note_links.
// The GraphQL type's documentation follows.
//
// links between notes
//
//
// columns and relationships of "note_links"
type addNoteTagsAndLinksInsert_note_linksNote_links_mutation_responseReturningNote_links struct {
	To int `json:"to"`
}

// GetTo returns addNoteTagsAndLinksInsert_note_linksNote_links_mutation_responseReturningNote_links.To, and is useful for accessing the field via an interface.
func (v *addNoteTagsAndLinksInsert_note_linksNote_links_mutation_responseReturningNote_links) GetTo() int {
	return v.To
}

// addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_response includes the requested fields of the GraphQL type note_tags_mutation_response.
// The GraphQL type's documentation follows.
//
// response of any mutation on the table "note_tags"
type addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_response struct {
	// data from the rows affected by the mutation
	Returning []*addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_responseReturningNote_tags `json:"returning"`
}

// GetReturning returns addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_response.Returning, and is useful for accessing the field via an interface.
func (v *addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_response) GetReturning() []*addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_responseReturningNote_tags {
	return v.Returning
}

// addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_responseReturningNote_tags includes the requested fields of the GraphQL type note_tags.
// The GraphQL type's documentation follows.
//
// Tags on notes
//
//
// columns and relationships of "note_tags"
type addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_responseReturningNote_tags struct {
	Tag string `json:"tag"`
}

// GetTag returns addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_responseReturningNote_tags.Tag, and is useful for accessing the field via an interface.
func (v *addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_responseReturningNote_tags) GetTag() string {
	return v.Tag
}

// addNoteTagsAndLinksResponse is returned by addNoteTagsAndLinks on success.
type addNoteTagsAndLinksResponse struct {
	// insert data into the table: "note_tags"
	Insert_note_tags *addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_response `json:"insert_note_tags"`
	// insert data into the table: "note_links"
	Insert_note_links *addNoteTagsAndLinksInsert_note_linksNote_links_mutation_response `json:"insert_note_links"`
}

// GetInsert_note_tags returns addNoteTagsAndLinksResponse.Insert_note_tags, and is useful for accessing the field via an interface.
func (v *addNoteTagsAndLinksResponse) GetInsert_note_tags() *addNoteTagsAndLinksInsert_note_tagsNote_tags_mutation_response {
	return v.Insert_note_tags
}

// GetInsert_note_links returns addNoteTagsAndLinksResponse.Insert_note_links, and is useful for accessing the field via an interface.
func (v *addNoteTagsAndLinksResponse) GetInsert_note_links() *addNoteTagsAndLinksInsert_note_linksNote_links_mutation_response {
	return v.Insert_note_links
}

// addNoteTagsInsert_note_tagsNote_tags_mutation_response includes the requested fields of the GraphQL type note_tags_mutation_response.
// The GraphQL type's documentation follows.
//
// response of any mutation on the table "note_tags"
type addNoteTagsInsert_note_tagsNote_tags_mutation_response struct {
	// data from the rows affected by the mutation
	Returning []*addNoteTagsInsert_note_tagsNote_tags_mutation_responseReturningNote_tags `json:"returning"`
}

// GetReturning returns addNoteTagsInsert_note_tagsNote_tags_mutation_response.Returning, and is useful for accessing the field via an interface.
func (v *addNoteTagsInsert_note_tagsNote_tags_mutation_response) GetReturning() []*addNoteTagsInsert_note_tagsNote_tags_mutation_responseReturningNote_tags {
	return v.Returning
}

// addNoteTagsInsert_note_tagsNote_tags_mutation_responseReturningNote_tags includes the requested fields of the GraphQL type note_tags.
// The GraphQL type's documentation follows.
//
// Tags on notes
//
//
// columns and relationships of "note_tags"
type addNoteTagsInsert_note_tagsNote_tags_mutation_responseReturningNote_tags struct {
	Tag string `json:"tag"`
}

// GetTag returns addNoteTagsInsert_note_tagsNote_tags_mutation_responseReturningNote_tags.Tag, and is useful for accessing the field via an interface.
func (v *addNoteTagsInsert_note_tagsNote_tags_mutation_responseReturningNote_tags) GetTag() string {
	return v.Tag
}

// addNoteTagsResponse is returned by addNoteTags on success.
type addNoteTagsResponse struct {
	// insert data into the table: "note_tags"
	Insert_note_tags *addNoteTagsInsert_note_tagsNote_tags_mutation_response `json:"insert_note_tags"`
}

// GetInsert_note_tags returns addNoteTagsResponse.Insert_note_tags, and is useful for accessing the field via an interface.
func (v *addNoteTagsResponse) GetInsert_note_tags() *addNoteTagsInsert_note_tagsNote_tags_mutation_response {
	return v.Insert_note_tags
}

// getNoteByIdNotes includes the requested fields of the GraphQL type notes.
// The GraphQL type's documentation follows.
//
// A list of notes
//
//
// columns and relationships of "notes"
type getNoteByIdNotes struct {
	Id         int       `json:"id"`
	Note       string    `json:"note"`
	Creator    string    `json:"creator"`
	Created_at time.Time `json:"created_at"`
	// fetch data from the table: "note_tags"
	Note_tags []*getNoteByIdNotesNote_tags `json:"note_tags"`
	// fetch data from the table: "note_links"
	Note_links []*getNoteByIdNotesNote_links `json:"note_links"`
}

// GetId returns getNoteByIdNotes.Id, and is useful for accessing the field via an interface.
func (v *getNoteByIdNotes) GetId() int { return v.Id }

// GetNote returns getNoteByIdNotes.Note, and is useful for accessing the field via an interface.
func (v *getNoteByIdNotes) GetNote() string { return v.Note }

// GetCreator returns getNoteByIdNotes.Creator, and is useful for accessing the field via an interface.
func (v *getNoteByIdNotes) GetCreator() string { return v.Creator }

// GetCreated_at returns getNoteByIdNotes.Created_at, and is useful for accessing the field via an interface.
func (v *getNoteByIdNotes) GetCreated_at() time.Time { return v.Created_at }

// GetNote_tags returns getNoteByIdNotes.Note_tags, and is useful for accessing the field via an interface.
func (v *getNoteByIdNotes) GetNote_tags() []*getNoteByIdNotesNote_tags { return v.Note_tags }

// GetNote_links returns getNoteByIdNotes.Note_links, and is useful for accessing the field via an interface.
func (v *getNoteByIdNotes) GetNote_links() []*getNoteByIdNotesNote_links { return v.Note_links }

// getNoteByIdNotesNote_links includes the requested fields of the GraphQL type note_links.
// The GraphQL type's documentation follows.
//
// links between notes
//
//
// columns and relationships of "note_links"
type getNoteByIdNotesNote_links struct {
	To int `json:"to"`
}

// GetTo returns getNoteByIdNotesNote_links.To, and is useful for accessing the field via an interface.
func (v *getNoteByIdNotesNote_links) GetTo() int { return v.To }

// getNoteByIdNotesNote_tags includes the requested fields of the GraphQL type note_tags.
// The GraphQL type's documentation follows.
//
// Tags on notes
//
//
// columns and relationships of "note_tags"
type getNoteByIdNotesNote_tags struct {
	Tag string `json:"tag"`
}

// GetTag returns getNoteByIdNotesNote_tags.Tag, and is useful for accessing the field via an interface.
func (v *getNoteByIdNotesNote_tags) GetTag() string { return v.Tag }

// getNoteByIdResponse is returned by getNoteById on success.
type getNoteByIdResponse struct {
	// fetch data from the table: "notes"
	Notes []*getNoteByIdNotes `json:"notes"`
}

// GetNotes returns getNoteByIdResponse.Notes, and is useful for accessing the field via an interface.
func (v *getNoteByIdResponse) GetNotes() []*getNoteByIdNotes { return v.Notes }

// searchNotesByTagResponse is returned by searchNotesByTag on success.
type searchNotesByTagResponse struct {
	// execute function "search_by_tag" which returns "notes"
	Search_by_tag []*searchNotesByTagSearch_by_tagNotes `json:"search_by_tag"`
}

// GetSearch_by_tag returns searchNotesByTagResponse.Search_by_tag, and is useful for accessing the field via an interface.
func (v *searchNotesByTagResponse) GetSearch_by_tag() []*searchNotesByTagSearch_by_tagNotes {
	return v.Search_by_tag
}

// searchNotesByTagSearch_by_tagNotes includes the requested fields of the GraphQL type notes.
// The GraphQL type's documentation follows.
//
// A list of notes
//
//
// columns and relationships of "notes"
type searchNotesByTagSearch_by_tagNotes struct {
	Note       string    `json:"note"`
	Id         int       `json:"id"`
	Creator    string    `json:"creator"`
	Created_at time.Time `json:"created_at"`
	// fetch data from the table: "note_tags"
	Note_tags []*searchNotesByTagSearch_by_tagNotesNote_tags `json:"note_tags"`
	// fetch data from the table: "note_links"
	Note_links []*searchNotesByTagSearch_by_tagNotesNote_links `json:"note_links"`
}

// GetNote returns searchNotesByTagSearch_by_tagNotes.Note, and is useful for accessing the field via an interface.
func (v *searchNotesByTagSearch_by_tagNotes) GetNote() string { return v.Note }

// GetId returns searchNotesByTagSearch_by_tagNotes.Id, and is useful for accessing the field via an interface.
func (v *searchNotesByTagSearch_by_tagNotes) GetId() int { return v.Id }

// GetCreator returns searchNotesByTagSearch_by_tagNotes.Creator, and is useful for accessing the field via an interface.
func (v *searchNotesByTagSearch_by_tagNotes) GetCreator() string { return v.Creator }

// GetCreated_at returns searchNotesByTagSearch_by_tagNotes.Created_at, and is useful for accessing the field via an interface.
func (v *searchNotesByTagSearch_by_tagNotes) GetCreated_at() time.Time { return v.Created_at }

// GetNote_tags returns searchNotesByTagSearch_by_tagNotes.Note_tags, and is useful for accessing the field via an interface.
func (v *searchNotesByTagSearch_by_tagNotes) GetNote_tags() []*searchNotesByTagSearch_by_tagNotesNote_tags {
	return v.Note_tags
}

// GetNote_links returns searchNotesByTagSearch_by_tagNotes.Note_links, and is useful for accessing the field via an interface.
func (v *searchNotesByTagSearch_by_tagNotes) GetNote_links() []*searchNotesByTagSearch_by_tagNotesNote_links {
	return v.Note_links
}

// searchNotesByTagSearch_by_tagNotesNote_links includes the requested fields of the GraphQL type note_links.
// The GraphQL type's documentation follows.
//
// links between notes
//
//
// columns and relationships of "note_links"
type searchNotesByTagSearch_by_tagNotesNote_links struct {
	To int `json:"to"`
}

// GetTo returns searchNotesByTagSearch_by_tagNotesNote_links.To, and is useful for accessing the field via an interface.
func (v *searchNotesByTagSearch_by_tagNotesNote_links) GetTo() int { return v.To }

// searchNotesByTagSearch_by_tagNotesNote_tags includes the requested fields of the GraphQL type note_tags.
// The GraphQL type's documentation follows.
//
// Tags on notes
//
//
// columns and relationships of "note_tags"
type searchNotesByTagSearch_by_tagNotesNote_tags struct {
	Tag string `json:"tag"`
}

// GetTag returns searchNotesByTagSearch_by_tagNotesNote_tags.Tag, and is useful for accessing the field via an interface.
func (v *searchNotesByTagSearch_by_tagNotesNote_tags) GetTag() string { return v.Tag }

// updateNoteResponse is returned by updateNote on success.
type updateNoteResponse struct {
	// update data of the table: "notes"
	Update_notes *updateNoteUpdate_notesNotes_mutation_response `json:"update_notes"`
}

// GetUpdate_notes returns updateNoteResponse.Update_notes, and is useful for accessing the field via an interface.
func (v *updateNoteResponse) GetUpdate_notes() *updateNoteUpdate_notesNotes_mutation_response {
	return v.Update_notes
}

// updateNoteUpdate_notesNotes_mutation_response includes the requested fields of the GraphQL type notes_mutation_response.
// The GraphQL type's documentation follows.
//
// response of any mutation on the table "notes"
type updateNoteUpdate_notesNotes_mutation_response struct {
	// data from the rows affected by the mutation
	Returning []*updateNoteUpdate_notesNotes_mutation_responseReturningNotes `json:"returning"`
}

// GetReturning returns updateNoteUpdate_notesNotes_mutation_response.Returning, and is useful for accessing the field via an interface.
func (v *updateNoteUpdate_notesNotes_mutation_response) GetReturning() []*updateNoteUpdate_notesNotes_mutation_responseReturningNotes {
	return v.Returning
}

// updateNoteUpdate_notesNotes_mutation_responseReturningNotes includes the requested fields of the GraphQL type notes.
// The GraphQL type's documentation follows.
//
// A list of notes
//
//
// columns and relationships of "notes"
type updateNoteUpdate_notesNotes_mutation_responseReturningNotes struct {
	Note       string    `json:"note"`
	Id         int       `json:"id"`
	Creator    string    `json:"creator"`
	Created_at time.Time `json:"created_at"`
}

// GetNote returns updateNoteUpdate_notesNotes_mutation_responseReturningNotes.Note, and is useful for accessing the field via an interface.
func (v *updateNoteUpdate_notesNotes_mutation_responseReturningNotes) GetNote() string { return v.Note }

// GetId returns updateNoteUpdate_notesNotes_mutation_responseReturningNotes.Id, and is useful for accessing the field via an interface.
func (v *updateNoteUpdate_notesNotes_mutation_responseReturningNotes) GetId() int { return v.Id }

// GetCreator returns updateNoteUpdate_notesNotes_mutation_responseReturningNotes.Creator, and is useful for accessing the field via an interface.
func (v *updateNoteUpdate_notesNotes_mutation_responseReturningNotes) GetCreator() string {
	return v.Creator
}

// GetCreated_at returns updateNoteUpdate_notesNotes_mutation_responseReturningNotes.Created_at, and is useful for accessing the field via an interface.
func (v *updateNoteUpdate_notesNotes_mutation_responseReturningNotes) GetCreated_at() time.Time {
	return v.Created_at
}

func GetAllNotes(
	ctx context.Context,
	client graphql.Client,
) (*GetAllNotesResponse, error) {
	var err error

	var retval GetAllNotesResponse
	err = client.MakeRequest(
		ctx,
		"GetAllNotes",
		`
query GetAllNotes {
	notes {
		id
		note
		creator
		created_at
		note_tags {
			tag
		}
		note_links {
			to
		}
	}
}
`,
		&retval,
		nil,
	)
	return &retval, err
}

func addNote(
	ctx context.Context,
	client graphql.Client,
	note *Notes_insert_input,
) (*addNoteResponse, error) {
	__input := __addNoteInput{
		Note: note,
	}
	var err error

	var retval addNoteResponse
	err = client.MakeRequest(
		ctx,
		"addNote",
		`
mutation addNote ($note: notes_insert_input! = {}) {
	insert_notes_one(object: $note) {
		id
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func addNoteLinks(
	ctx context.Context,
	client graphql.Client,
	links []*Note_links_insert_input,
) (*addNoteLinksResponse, error) {
	__input := __addNoteLinksInput{
		Links: links,
	}
	var err error

	var retval addNoteLinksResponse
	err = client.MakeRequest(
		ctx,
		"addNoteLinks",
		`
mutation addNoteLinks ($links: [note_links_insert_input!]!) {
	insert_note_links(objects: $links) {
		returning {
			to
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func addNoteTags(
	ctx context.Context,
	client graphql.Client,
	tags []*Note_tags_insert_input,
) (*addNoteTagsResponse, error) {
	__input := __addNoteTagsInput{
		Tags: tags,
	}
	var err error

	var retval addNoteTagsResponse
	err = client.MakeRequest(
		ctx,
		"addNoteTags",
		`
mutation addNoteTags ($tags: [note_tags_insert_input!]!) {
	insert_note_tags(objects: $tags) {
		returning {
			tag
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func addNoteTagsAndLinks(
	ctx context.Context,
	client graphql.Client,
	tags []*Note_tags_insert_input,
	links []*Note_links_insert_input,
) (*addNoteTagsAndLinksResponse, error) {
	__input := __addNoteTagsAndLinksInput{
		Tags:  tags,
		Links: links,
	}
	var err error

	var retval addNoteTagsAndLinksResponse
	err = client.MakeRequest(
		ctx,
		"addNoteTagsAndLinks",
		`
mutation addNoteTagsAndLinks ($tags: [note_tags_insert_input!]!, $links: [note_links_insert_input!]!) {
	insert_note_tags(objects: $tags) {
		returning {
			tag
		}
	}
	insert_note_links(objects: $links) {
		returning {
			to
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func getNoteById(
	ctx context.Context,
	client graphql.Client,
	id int,
) (*getNoteByIdResponse, error) {
	__input := __getNoteByIdInput{
		Id: id,
	}
	var err error

	var retval getNoteByIdResponse
	err = client.MakeRequest(
		ctx,
		"getNoteById",
		`
query getNoteById ($id: Int!) {
	notes(where: {id:{_eq:$id}}) {
		id
		note
		creator
		created_at
		note_tags {
			tag
		}
		note_links {
			to
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func searchNotesByTag(
	ctx context.Context,
	client graphql.Client,
	args *Search_by_tag_args,
) (*searchNotesByTagResponse, error) {
	__input := __searchNotesByTagInput{
		Args: args,
	}
	var err error

	var retval searchNotesByTagResponse
	err = client.MakeRequest(
		ctx,
		"searchNotesByTag",
		`
query searchNotesByTag ($args: search_by_tag_args!) {
	search_by_tag(args: $args) {
		note
		id
		creator
		created_at
		note_tags {
			tag
		}
		note_links {
			to
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func updateNote(
	ctx context.Context,
	client graphql.Client,
	id int,
	note string,
) (*updateNoteResponse, error) {
	__input := __updateNoteInput{
		Id:   id,
		Note: note,
	}
	var err error

	var retval updateNoteResponse
	err = client.MakeRequest(
		ctx,
		"updateNote",
		`
mutation updateNote ($id: Int!, $note: String!) {
	update_notes(where: {id:{_eq:$id}}, _set: {note:$note}) {
		returning {
			note
			id
			creator
			created_at
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
